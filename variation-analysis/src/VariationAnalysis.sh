#!/bin/bash
# VariationAnalysis 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of genome input: '$genome'"

    for i in "${!goby_aligment[@]}"; do
        echo "Value of goby alignment input: '${goby_aligment[$i]}'"
    done
    # The dx command-line tool downloads the input files
    # to the local file system using variable names for the filenames.

    # Create the data directories to mount into the Docker container
    mkdir -p /input/indexed_genome
    mkdir -p /input/alignment
    mkdir -p /output/

    dx download "$genome" -o /input/indexed_genome/"$genome"

    for i in "${!goby_aligment[@]}"; do
        dx download "${goby_aligment[$i]}" -o /input/alignment/${goby_aligment[$i]}
    done

    dx-docker pull artifacts/variationanalysis-app:latest

    # invoke the parallel-genotype-sbi script inside the container
    # sample invocation:
    #TODO: need to get the basename of the genome
    echo "export SBI_GENOME=/input/indexed_genome/ucsc_hg19" >> /input/configure.sh
    #TODO: need to get the basename of the files
    echo "export GOBY_ALIGNMENT=/input/alignment/NA12878_S1_gatk_realigned_filtered-chr21" >> /input/configure.sh
    # parallel-genotype-sbi.sh 10g /input/alignment/NA12878_S1_gatk_realigned_filtered-chr21 2>&1 | tee parallel-genotype-sbi.log
    docker run -it \
        -v /input/alignment/:/input/alignment \
        -v /input/indexed_genome:/input/indexed_genome \
        -v /output/:/output/ \
        --entrypoint /bin/bash -c "source /input/configure.sh; cd /output/; parallel-genotype-sbi.sh 10g ${GOBY_ALIGNMENT} 2>&1 | tee parallel-genotype-sbi.log" \
        artifacts/variationanalysis-app:latest

    #dx-docker run -v /input/:/input -v /output/:/output artifacts/variationanalysis-app:latest ...

    # invoke the predict-genotypes-many script inside the container
    dx-docker run -v /input/:/input -v /output/:/output artifacts/variationanalysis-app:latest ...

    # To recover the original filenames, you can use the output of
    # dx describe "$sorted_bam" --name.

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the utility dx-jobutil-add-output to format and                                                                                                          ls -l
    # add output variables to your job's output as appropriate for the output
    # class.

    for i in "${!predictions[@]}"; do
        dx-jobutil-add-output /output/prediction.vcf "${predictions[$i]}" --class=array:file
    done

}
