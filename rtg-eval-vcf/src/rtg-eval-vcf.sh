#!/bin/bash
# rtg-eval-vcf 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    dx-download-all-inputs --parallel
    #flatten the inputs in a single folder
    find ${HOME}/in/Predictions/ -type f -execdir mv {} .. \;

    CONFIG_FILE="${HOME}/in/scripts/configure.sh"
    mkdir -p ${HOME}/in/scripts/
    mv /input/scripts/* ${HOME}/in/scripts/

    echo "export RTG_TEMPLATE_ARCHIVE=${RTG_Template_name}" >> ${CONFIG_FILE}
    echo "export RTG_TEMPLATE_PATH=/in/RTG_Template" >> ${CONFIG_FILE}
    vcf_file=`filename /in/Predictions/*.vcf.gz`
    echo "export VCF_INPUT=/in/Predictions/$vcf_file" >> ${CONFIG_FILE}
    echo "export VCF_INPUT_BASENAME=${Predictions_prefix[0]}" >> ${CONFIG_FILE}
    echo "export BED_OBSERVED_REGIONS_INPUT=/in/Regions/${Regions_name}" >> ${CONFIG_FILE}
    echo "export BASELINE_VCF=/in/Baseline_VCF/${Baseline_VCF_name}" >> ${CONFIG_FILE}
    echo "export BASELINE_VCF_BASENAME=${Baseline_VCF_prefix}" >> ${CONFIG_FILE}

    echo "export BASELINE_REGIONS=/in/Baseline_Regions/${Baseline_Regions_name}" >> ${CONFIG_FILE}
    echo "export RTG_OPTIONS=\"${RTG_Vcfeval_Options}\"" >> ${CONFIG_FILE}


    cat >${HOME}/in/run.sh <<EOL
        #!/bin/bash
        source /in/scripts/configure.sh
        source /in/scripts/working_script.sh
        execute
EOL
    chmod a+x  ${HOME}/in/run.sh


    echo "Downloading the docker image..."
    dx-docker pull artifacts/variationanalysis-app:${Image_Version} &>/dev/null

    dx-docker run \
        -v ${HOME}/out/:/out/ \
        -v ${HOME}/in/:/in/ \
        artifacts/variationanalysis-app:${Image_Version} \
        bash -c "source ~/.bashrc; /in/run.sh"




    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    Eval_SNPs=$(dx upload Eval_SNPs --brief)
    Eval_Indels=$(dx upload Eval_Indels --brief)
    SNP_Recall_Plot=$(dx upload SNP_Recall_Plot --brief)
    Indel_Recall_Plot=$(dx upload Indel_Recall_Plot --brief)


    dx-jobutil-add-output Eval_SNPs "$Eval_SNPs" --class=file
    dx-jobutil-add-output Eval_Indels "$Eval_Indels" --class=file
    dx-jobutil-add-output SNP_Recall_Plot "$SNP_Recall_Plot" --class=file
    dx-jobutil-add-output Indel_Recall_Plot "$Indel_Recall_Plot" --class=file
}
